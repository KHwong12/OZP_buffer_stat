import{I as p,J as f,K as _,s as y,E as I,e as v,jX as V,jY as T,jZ as q,aU as Q,ee as S,ax as m,cj as d,a6 as b}from"./index.c449ba0d.js";import{r as F,o as w,n as g}from"./imageUtils.ab192a3b.js";import{f as U}from"./LayerView2D.0417a1f6.js";import{u as x}from"./LayerView.a76a0fbd.js";import{i as C}from"./RefreshableLayerView.2c00d787.js";import{s as P,a as R}from"./drapedUtils.f847dcb2.js";import"./BitmapTileContainer.a45ce773.js";import"./Bitmap.a525e5f1.js";import"./utils.05a32d96.js";import"./Utils.5475507e.js";import"./number.08b65821.js";import"./enums.05a6ea95.js";import"./enums.de935fa5.js";import"./Texture.cda2030f.js";import"./VertexElementDescriptor.d386088d.js";import"./MaterialKey.515c94cd.js";import"./alignmentUtils.63b4d661.js";import"./definitions.6dca4f7b.js";import"./TileContainer.5002d096.js";import"./WGLContainer.2e87395d.js";import"./pixelUtils.9fcd645a.js";import"./VertexArrayObject.72bbbc3e.js";import"./vec4f32.8f10672a.js";import"./ProgramTemplate.6295ca16.js";import"./StyleDefinition.5774ff26.js";import"./config.40d47db8.js";import"./GeometryUtils.8166011b.js";import"./earcut.d30cbec0.js";const k=e=>{let t=class extends e{async fetchPopupFeatures(s,a){const{layer:l}=this;if(!s)throw new y("tilelayerview:fetchPopupFeatures","Nothing to fetch without area",{layer:l});if(l.type!=="tile")throw new y("tilelayerview:fetchPopupFeatures","Layer type should be 'tile'",{type:l.type});const h=this.get("view.scale"),o=l.allSublayers.toArray().filter(i=>{const r=i.minScale===0||h<=i.minScale,n=i.maxScale===0||h>=i.maxScale;return i.popupTemplate&&i.popupEnabled&&i.visible&&r&&n});return I(o.map(async i=>{const r=i.createQuery(),n=v(a)?a.event:null,c=P({renderer:i.renderer,event:n});return r.geometry=this.createFetchPopupFeaturesQueryGeometry(s,c),r.outFields=await i.popupTemplate.getRequiredFields(),(await i.queryFeatures(r)).features})).then(i=>[].concat(...i.map(r=>r.value).filter(Boolean)))}};return p([f()],t.prototype,"layer",void 0),t=p([_("esri.layers.mixins.TileLayerView")],t),t},E=[0,0];let u=class extends k(C(F(U(x)))){constructor(){super(...arguments),this._tileStrategy=null,this._fetchQueue=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume()}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null;this._tileInfoView=new V(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new T({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(t,s)=>this.fetchTile(t,s)}),this._tileStrategy=new q({cachePolicy:"keep",resampling:this.resampling,acquireTile:t=>this.acquireTile(t),releaseTile:t=>this.releaseTile(t),tileInfoView:this._tileInfoView}),this.requestUpdate(),this.handles.add(Q(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._fetchQueue=this._tileStrategy=this._tileInfoView=null}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(e){var t;return S((t=this.layer.tileInfo)==null?void 0:t.spatialReference,e)}createFetchPopupFeaturesQueryGeometry(e,t){return R(e,t,this.view)}async doRefresh(){this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach(e=>this._enqueueTileFetch(e)))}isUpdating(){var e,t;return(t=(e=this._fetchQueue)==null?void 0:e.updating)!=null?t:!1}acquireTile(e){const t=this._bitmapView.createTile(e),s=t.bitmap;return[s.x,s.y]=this._tileInfoView.getTileCoords(E,t.key),s.resolution=this._tileInfoView.getTileResolution(t.key),[s.width,s.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(t),this._bitmapView.addChild(t),this.requestUpdate(),t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",()=>e.destroy()),this.requestUpdate()}async fetchTile(e,t={}){const s="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:a,resamplingLevel:l=0}=t;if(!s)try{return await this._fetchImage(e,a)}catch(i){if(!m(i)&&!this.resampling)return w(this._tileInfoView.tileInfo.size);if(l<3){const r=this._tileInfoView.getTileParentId(e.id);if(r){const n=new d(r),c=await this.fetchTile(n,{...t,resamplingLevel:l+1});return g(this._tileInfoView,c,n,e)}}throw i}const h=new d(0,0,0,0);let o;try{if(await s.fetchAvailabilityUpsample(e.level,e.row,e.col,h,{signal:a}),h.level!==e.level&&!this.resampling)return w(this._tileInfoView.tileInfo.size);o=await this._fetchImage(h,a)}catch(i){if(m(i))throw i;o=await this._fetchImage(e,a)}return this.resampling?g(this._tileInfoView,o,h,e):o}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",()=>this.requestUpdate())}catch(t){m(t)||b.getLogger(this.declaredClass).error(t)}this.requestUpdate()}}async _fetchImage(e,t){return this.layer.fetchTile(e.level,e.row,e.col,{signal:t})}};p([f()],u.prototype,"_fetchQueue",void 0),p([f()],u.prototype,"resampling",null),u=p([_("esri.views.2d.layers.TileLayerView2D")],u);const ue=u;export{ue as default};
