import{lN as D,bm as C,b6 as S,ar as R,bt as B,gS as O,$ as A,lO as Y,aB as j,lP as k,lQ as q,lR as G,lS as U,lT as Z,lU as _,lV as Q,lW as W,lX as X,lY as H,lZ as J}from"./index.c449ba0d.js";let I=null;function K(n,a,s){return n.x<0?n.x+=a:n.x>s&&(n.x-=a),n}function L(n,a,s,t){const i=D(s)?C(s):null,r=i?Math.round((i.valid[1]-i.valid[0])/a.scale[0]):null;return n.map(o=>{const e=new S(R(o.geometry));return B(a,e,e,e.hasZ,e.hasM),o.geometry=i?K(e,r,t[0]):e,o})}function aa(n,a=18,s,t,i,r){const o=new Float64Array(i*r);a=Math.round(j(a));let e=Number.POSITIVE_INFINITY,l=Number.NEGATIVE_INFINITY,u=0,m=0,d=0,f=0;const c=k(t,s);for(const{geometry:v,attributes:z}of n){const{x:y,y:V}=v,E=Math.max(0,y-a),M=Math.max(0,V-a),g=Math.min(r,V+a),P=Math.min(i,y+a),$=+c(z);for(let x=M;x<g;x++)for(let T=E;T<P;T++){const F=x*i+T,b=q(T-y,x-V,a),N=o[F];u=o[F]+=b*$;const w=u-N;m+=w,d+=w*w,u<e&&(e=u),u>l&&(l=u),f++}}if(!f)return{mean:0,stddev:0,min:0,max:0,mid:0,count:0};const p=(l-e)/2;return{mean:m/f,stdDev:Math.sqrt((d-m*m/f)/f),min:e,max:l,mid:p,count:f}}async function h(n,a){if(!a)return[];const s=n.field,t=n.valueExpression,i=n.normalizationType,r=n.normalizationField,o=n.normalizationTotal,e=[],l=n.viewInfoParams;let u=null,m=null;if(t){if(!I){const{arcadeUtils:c}=await O();I=c}u=I.createFunction(t),m=l&&I.getViewInfo({viewingMode:l.viewingMode,scale:l.scale,spatialReference:new A(l.spatialReference)})}const d=n.fieldInfos,f=!(a[0]&&"declaredClass"in a[0]&&a[0].declaredClass==="esri.Graphic")&&d?{fields:d}:null;return a.forEach(c=>{const p=c.attributes;let v;if(t){const z=f?{...c,layer:f}:c,y=I.createExecContext(z,m);v=I.executeFunction(u,y)}else p&&(v=p[s]);if(i&&isFinite(v)){const z=p&&parseFloat(p[r]);v=Y(v,i,z,o)}e.push(v)}),e}async function ea(n){const{attribute:a,features:s}=n,{normalizationType:t,normalizationField:i,minValue:r,maxValue:o,fieldType:e}=a,l=await h({field:a.field,valueExpression:a.valueExpression,normalizationType:t,normalizationField:i,normalizationTotal:a.normalizationTotal,viewInfoParams:a.viewInfoParams,fieldInfos:a.fieldInfos},s),u=G({normalizationType:t,normalizationField:i,minValue:r,maxValue:o}),m={value:.5,fieldType:e},d=e==="esriFieldTypeString"?U({values:l,supportsNullCount:u,percentileParams:m}):Z({values:l,minValue:r,maxValue:o,useSampleStdDev:!t,supportsNullCount:u,percentileParams:m});return _(d,e==="esriFieldTypeDate")}async function ia(n){const{attribute:a,features:s}=n,t=await h({field:a.field,valueExpression:a.valueExpression,viewInfoParams:a.viewInfoParams,fieldInfos:a.fieldInfos},s),i=Q(t);return W(i,a.domain,a.returnAllCodedValues)}async function ta(n){const{attribute:a,features:s}=n,{field:t,normalizationType:i,normalizationField:r,normalizationTotal:o,classificationMethod:e}=a,l=await h({field:t,valueExpression:a.valueExpression,normalizationType:i,normalizationField:r,normalizationTotal:o,viewInfoParams:a.viewInfoParams,fieldInfos:a.fieldInfos},s),u=X(l,{field:t,normalizationType:i,normalizationField:r,normalizationTotal:o,classificationMethod:e,standardDeviationInterval:a.standardDeviationInterval,numClasses:a.numClasses,minValue:a.minValue,maxValue:a.maxValue});return H(u,e)}async function la(n){const{attribute:a,features:s}=n,{field:t,normalizationType:i,normalizationField:r,normalizationTotal:o,classificationMethod:e}=a,l=await h({field:t,valueExpression:a.valueExpression,normalizationType:i,normalizationField:r,normalizationTotal:o,viewInfoParams:a.viewInfoParams,fieldInfos:a.fieldInfos},s);return J(l,{field:t,normalizationType:i,normalizationField:r,normalizationTotal:o,classificationMethod:e,standardDeviationInterval:a.standardDeviationInterval,numBins:a.numBins,minValue:a.minValue,maxValue:a.maxValue})}async function oa(n){const{attribute:a,features:s}=n,{field:t,radius:i,fieldOffset:r,transform:o,spatialReference:e,size:l}=a,u=L(s,o,e,l),{count:m,min:d,max:f,mean:c,stdDev:p}=aa(u,i,r,t,l[0],l[1]);return{count:m,min:d,max:f,avg:c,stddev:p}}export{ta as classBreaks,oa as heatmapStatistics,la as histogram,ea as summaryStatistics,ia as uniqueValues};
