import{mD as p,mE as g,mC as y,mF as w,mG as I,dr as f,h as m,_}from"./index.4188ada5.js";class b{constructor(){this.code=null,this.description=null}}class v{constructor(t){this.error=new b,this.globalId=null,this.objectId=null,this.success=!1,this.uniqueId=null,this.error.description=t}}function d(e){return new v(e)}class q{constructor(t){this.globalId=null,this.success=!0,this.objectId=this.uniqueId=t}}function G(e){return new q(e)}const a=new Set;function V(e,t,n,h=!1,u){a.clear();for(const r in n){const i=e.get(r);if(!i)continue;const l=n[r],s=E(i,l);if(s!==l&&u&&u.push({name:"invalid-value-type",message:"attribute value was converted to match the field type",details:{field:i,originalValue:l,sanitizedValue:s}}),a.add(i.name),i&&(h||i.editable)){const c=p(i,s);if(c)return d(g(c,i,s));t[i.name]=s}}for(const r of e.requiredFields)if(!a.has(r.name))return d(`missing required field "${r.name}"`);return null}function E(e,t){let n=t;return typeof t=="string"&&y(e)?n=parseFloat(t):t!=null&&w(e)&&typeof t!="string"&&(n=String(t)),I(n)}let o;function j(e,t){if(!e||!f(t))return e;if("rings"in e||"paths"in e){if(m(o))throw new TypeError("geometry engine not loaded");return o.simplify(t,e)}return e}async function P(){return m(o)&&(o=await _(()=>import("./geometryEngineJSON.414a19d3.js"),["assets/geometryEngineJSON.414a19d3.js","assets/index.4188ada5.js","assets/index.313b6d72.css","assets/geometryEngineJSON.eea88a23.js"])),o}async function D(e,t){!f(e)||t!=="esriGeometryPolygon"&&t!=="esriGeometryPolyline"||await P()}export{d as a,G as f,j as g,V as m,D as w};
