import{e as o,g as f,j as w,aU as p,aV as n,fs as y,h as _,I as V,K as v}from"./index.4188ada5.js";import{s as C}from"./utils.e9e483a9.js";import{r as b}from"./GroupContainer.c8fd5e16.js";import{f as T}from"./LayerView2D.5cdeff28.js";import{i as g}from"./GraphicContainer.6938e302.js";import{a as m}from"./BaseGraphicContainer.0cf72ca4.js";import{u as H}from"./LayerView.62e1dc05.js";import"./Utils.457c0fc5.js";import"./number.08b65821.js";import"./enums.05a6ea95.js";import"./enums.de935fa5.js";import"./Texture.568e5c45.js";import"./VertexElementDescriptor.d386088d.js";import"./MaterialKey.b421db94.js";import"./alignmentUtils.63b4d661.js";import"./definitions.6dca4f7b.js";import"./WGLContainer.87eea6ac.js";import"./pixelUtils.58168171.js";import"./VertexArrayObject.5f698233.js";import"./vec4f32.8f10672a.js";import"./ProgramTemplate.0682cc87.js";import"./StyleDefinition.5774ff26.js";import"./config.40d47db8.js";import"./GeometryUtils.8166011b.js";import"./earcut.d30cbec0.js";import"./CIMSymbolHelper.3dad63ef.js";import"./BidiEngine.ec67919b.js";import"./floatRGBA.82bef49f.js";import"./GeometryUtils.814cb798.js";import"./normalizeUtilsSync.5b4ddb79.js";import"./FeatureContainer.a7f29b8d.js";import"./TileContainer.287a9b70.js";import"./visualVariablesUtils.06d64c49.js";import"./visualVariablesUtils.203f87e4.js";import"./Matcher.eb0af4f6.js";import"./tileUtils.05a75f4e.js";import"./TileClipper.b8809655.js";import"./Geometry.b68345ae.js";import"./cimAnalyzer.b83ee753.js";import"./callExpressionWithFeature.31cbf380.js";import"./ExpandedCIM.ef7c6ca1.js";import"./devEnvironmentUtils.8c6e6b72.js";import"./schemaUtils.759c1591.js";import"./createSymbolSchema.9329aefd.js";import"./MD5.97b39efc.js";import"./util.9f0dafc0.js";import"./ComputedAttributeStorage.1b26a7b9.js";import"./centroid.1bb4a8ba.js";import"./vec3f32.0772c8d8.js";const d="sublayers",l="layerView",I=Object.freeze({remove(){},pause(){},resume(){}});let c=class extends T(H){constructor(){super(...arguments),this._highlightIds=new Map,this.container=new b}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(e=>!!e.popupTemplate)).flat()}*graphicsViews(){o(this._graphicsViewsFeatureCollectionMap)?yield*this._graphicsViewsFeatureCollectionMap.keys():o(this._graphicsViews)?yield*this._graphicsViews:yield*[]}async hitTest(i,t){return Array.from(this.graphicsViews(),e=>{const s=e.hitTest(i);if(o(this._graphicsViewsFeatureCollectionMap)){const h=this._graphicsViewsFeatureCollectionMap.get(e);for(const r of s)!r.popupTemplate&&h.popupTemplate&&(r.popupTemplate=h.popupTemplate)}return s}).flat().map(e=>({type:"graphic",graphic:e,layer:this.layer,mapPoint:i}))}highlight(i){let t;return typeof i=="number"?t=[i]:i instanceof f?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(e=>e&&e.uid):w.isCollection(i)&&(t=i.map(e=>e&&e.uid).toArray()),t=t.filter(e=>e!=null),t.length?(this._addHighlight(t),{remove:()=>{this._removeHighlight(t)}}):I}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(o(e)&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of e){const h=new g(this.view.featuresTilingScheme);h.fadeTransitionEnabled=!0;const r=new m({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:t,container:h});this._graphicsViewsFeatureCollectionMap.set(r,s),this.container.addChild(r.container),this.handles.add([p(()=>s.visible,a=>r.container.visible=a,n),p(()=>r.updating,()=>this.notifyChange("updating"),n)],l)}this._updateHighlight()}else o(this.layer.sublayers)&&this.handles.add(y(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),d)}detach(){this._destroyGraphicsViews(),this.handles.remove(d)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.handles.remove(l);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),_(this.layer.sublayers))return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const s of this.layer.sublayers){const h=new C,r=new g(this.view.featuresTilingScheme);r.fadeTransitionEnabled=!0;const a=new m({view:t,graphics:s.graphics,requestUpdateCallback:e,container:r});this.handles.add([s.on("graphic-update",a.graphicUpdateHandler),p(()=>s.visible,u=>a.container.visible=u,n),p(()=>a.updating,()=>this.notifyChange("updating"),n)],l),h.addChild(a.container),this.container.addChild(h),i.push(a)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};c=V([v("esri.views.2d.layers.MapNotesLayerView2D")],c);const Ci=c;export{Ci as default};
